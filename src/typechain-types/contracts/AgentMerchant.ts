/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AgentMerchantInterface extends utils.Interface {
  functions: {
    "agentInfoMapper(address)": FunctionFragment;
    "commitSellStock(address,uint256)": FunctionFragment;
    "createAgent(address,string,string)": FunctionFragment;
    "creatorAddressToAgentWalletAddressesMapper(address,uint256)": FunctionFragment;
    "fullfillSellStock()": FunctionFragment;
    "getSellShareRequestsLength(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseStock(address,uint256)": FunctionFragment;
    "sellShareRequests(address,uint256)": FunctionFragment;
    "stockTokenToWalletAddressMapper(address)": FunctionFragment;
    "updateUsdcTokenAddress(address)": FunctionFragment;
    "usdcToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agentInfoMapper"
      | "commitSellStock"
      | "createAgent"
      | "creatorAddressToAgentWalletAddressesMapper"
      | "fullfillSellStock"
      | "getSellShareRequestsLength"
      | "owner"
      | "purchaseStock"
      | "sellShareRequests"
      | "stockTokenToWalletAddressMapper"
      | "updateUsdcTokenAddress"
      | "usdcToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agentInfoMapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSellStock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAgent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAddressToAgentWalletAddressesMapper",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fullfillSellStock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSellShareRequestsLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseStock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShareRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stockTokenToWalletAddressMapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUsdcTokenAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "agentInfoMapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSellStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAddressToAgentWalletAddressesMapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullfillSellStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellShareRequestsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellShareRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stockTokenToWalletAddressMapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUsdcTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;

  events: {
    "AgentCreated(address,address,address,string,string,uint256)": EventFragment;
    "PricePerTokenUpdated(address,uint256,uint256)": EventFragment;
    "SellRequestFulfilled(address,address,uint256,uint256,uint256)": EventFragment;
    "SellStockRequested(address,address,uint256)": EventFragment;
    "StockPurchased(address,address,address,uint256,uint256)": EventFragment;
    "UsdcTokenAddressUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricePerTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellRequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellStockRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StockPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsdcTokenAddressUpdated"): EventFragment;
}

export interface AgentCreatedEventObject {
  walletAddress: string;
  creatorAddress: string;
  stockTokenAddress: string;
  name: string;
  symbol: string;
  initialPrice: BigNumber;
}
export type AgentCreatedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  AgentCreatedEventObject
>;

export type AgentCreatedEventFilter = TypedEventFilter<AgentCreatedEvent>;

export interface PricePerTokenUpdatedEventObject {
  agentWalletAddress: string;
  oldPricePerToken: BigNumber;
  newPricePerToken: BigNumber;
}
export type PricePerTokenUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PricePerTokenUpdatedEventObject
>;

export type PricePerTokenUpdatedEventFilter =
  TypedEventFilter<PricePerTokenUpdatedEvent>;

export interface SellRequestFulfilledEventObject {
  agentWalletAddress: string;
  stockTokenAddress: string;
  totalTokenAmount: BigNumber;
  newPricePerToken: BigNumber;
  totalUsdcPaid: BigNumber;
}
export type SellRequestFulfilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  SellRequestFulfilledEventObject
>;

export type SellRequestFulfilledEventFilter =
  TypedEventFilter<SellRequestFulfilledEvent>;

export interface SellStockRequestedEventObject {
  seller: string;
  stockTokenAddress: string;
  tokenAmount: BigNumber;
}
export type SellStockRequestedEvent = TypedEvent<
  [string, string, BigNumber],
  SellStockRequestedEventObject
>;

export type SellStockRequestedEventFilter =
  TypedEventFilter<SellStockRequestedEvent>;

export interface StockPurchasedEventObject {
  buyer: string;
  agentWalletAddress: string;
  stockTokenAddress: string;
  tokenAmount: BigNumber;
  usdcAmount: BigNumber;
}
export type StockPurchasedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  StockPurchasedEventObject
>;

export type StockPurchasedEventFilter = TypedEventFilter<StockPurchasedEvent>;

export interface UsdcTokenAddressUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type UsdcTokenAddressUpdatedEvent = TypedEvent<
  [string, string],
  UsdcTokenAddressUpdatedEventObject
>;

export type UsdcTokenAddressUpdatedEventFilter =
  TypedEventFilter<UsdcTokenAddressUpdatedEvent>;

export interface AgentMerchant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgentMerchantInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agentInfoMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        walletAddress: string;
        stockTokenAddress: string;
        pricePerToken: BigNumber;
        creatorAddress: string;
      }
    >;

    commitSellStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAgent(
      walletAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creatorAddressToAgentWalletAddressesMapper(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fullfillSellStock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSellShareRequestsLength(
      stockTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellShareRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        userWalletAddress: string;
        tokenAmount: BigNumber;
      }
    >;

    stockTokenToWalletAddressMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateUsdcTokenAddress(
      _usdcTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;
  };

  agentInfoMapper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      walletAddress: string;
      stockTokenAddress: string;
      pricePerToken: BigNumber;
      creatorAddress: string;
    }
  >;

  commitSellStock(
    stockTokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAgent(
    walletAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creatorAddressToAgentWalletAddressesMapper(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fullfillSellStock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSellShareRequestsLength(
    stockTokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseStock(
    stockTokenAddress: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellShareRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { userWalletAddress: string; tokenAmount: BigNumber }
  >;

  stockTokenToWalletAddressMapper(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateUsdcTokenAddress(
    _usdcTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    agentInfoMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        walletAddress: string;
        stockTokenAddress: string;
        pricePerToken: BigNumber;
        creatorAddress: string;
      }
    >;

    commitSellStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAgent(
      walletAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creatorAddressToAgentWalletAddressesMapper(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fullfillSellStock(overrides?: CallOverrides): Promise<boolean>;

    getSellShareRequestsLength(
      stockTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sellShareRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        userWalletAddress: string;
        tokenAmount: BigNumber;
      }
    >;

    stockTokenToWalletAddressMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateUsdcTokenAddress(
      _usdcTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AgentCreated(address,address,address,string,string,uint256)"(
      walletAddress?: PromiseOrValue<string> | null,
      creatorAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      name?: null,
      symbol?: null,
      initialPrice?: null
    ): AgentCreatedEventFilter;
    AgentCreated(
      walletAddress?: PromiseOrValue<string> | null,
      creatorAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      name?: null,
      symbol?: null,
      initialPrice?: null
    ): AgentCreatedEventFilter;

    "PricePerTokenUpdated(address,uint256,uint256)"(
      agentWalletAddress?: PromiseOrValue<string> | null,
      oldPricePerToken?: null,
      newPricePerToken?: null
    ): PricePerTokenUpdatedEventFilter;
    PricePerTokenUpdated(
      agentWalletAddress?: PromiseOrValue<string> | null,
      oldPricePerToken?: null,
      newPricePerToken?: null
    ): PricePerTokenUpdatedEventFilter;

    "SellRequestFulfilled(address,address,uint256,uint256,uint256)"(
      agentWalletAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      totalTokenAmount?: null,
      newPricePerToken?: null,
      totalUsdcPaid?: null
    ): SellRequestFulfilledEventFilter;
    SellRequestFulfilled(
      agentWalletAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      totalTokenAmount?: null,
      newPricePerToken?: null,
      totalUsdcPaid?: null
    ): SellRequestFulfilledEventFilter;

    "SellStockRequested(address,address,uint256)"(
      seller?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      tokenAmount?: null
    ): SellStockRequestedEventFilter;
    SellStockRequested(
      seller?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      tokenAmount?: null
    ): SellStockRequestedEventFilter;

    "StockPurchased(address,address,address,uint256,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      agentWalletAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      tokenAmount?: null,
      usdcAmount?: null
    ): StockPurchasedEventFilter;
    StockPurchased(
      buyer?: PromiseOrValue<string> | null,
      agentWalletAddress?: PromiseOrValue<string> | null,
      stockTokenAddress?: null,
      tokenAmount?: null,
      usdcAmount?: null
    ): StockPurchasedEventFilter;

    "UsdcTokenAddressUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): UsdcTokenAddressUpdatedEventFilter;
    UsdcTokenAddressUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): UsdcTokenAddressUpdatedEventFilter;
  };

  estimateGas: {
    agentInfoMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commitSellStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAgent(
      walletAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creatorAddressToAgentWalletAddressesMapper(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fullfillSellStock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSellShareRequestsLength(
      stockTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellShareRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stockTokenToWalletAddressMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateUsdcTokenAddress(
      _usdcTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    agentInfoMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commitSellStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAgent(
      walletAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creatorAddressToAgentWalletAddressesMapper(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullfillSellStock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSellShareRequestsLength(
      stockTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseStock(
      stockTokenAddress: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellShareRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stockTokenToWalletAddressMapper(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateUsdcTokenAddress(
      _usdcTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
